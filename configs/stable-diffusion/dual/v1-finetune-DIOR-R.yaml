model:
  base_learning_rate: 1.0e-04
  # target: ldm.models.diffusion.ddpm.LatentDiffusion
  target: bldm.bldm_dual.BLDM
  params:
    # reg_weight: 0.0
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "jpg"
    cond_stage_key: "txt"
    image_size: 64
    channels: 4
    cond_stage_trainable: false   # Note: different from the one we trained before
    conditioning_key: crossattn
    monitor: val/loss_simple_ema
    scale_factor: 0.18215

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 1 ] # NOTE for resuming. use 10000 if starting from scratch
        # warm_up_steps: [ 10000 ] # NOTE for resuming. use 10000 if starting from scratch
        cycle_lengths: [ 10000000000000 ] # incredibly large number to prevent corner cases
        f_start: [ 1.e-6 ]
        f_max: [ 1. ]
        f_min: [ 1. ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel_bbox_v2.UNetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder
      # params:
      #   with_bbox: True
      #   # extend_outputlen: 385 ## 77*5
      #   extend_outputlen: 616 ## 77*8 1232

    condition_tokenizer:
      target: bldm.condition_encoder.RBoxEncoder
      params:
        in_dim: 768
        out_dim: 768
    # mask_attention:
    #   target: bldm.mask_attention.MaskCrossAttention
    #   params:
    #     in_channels: 320
    #     n_heads: 8
    #     d_head: 40
    #     inner_dim: 320
    #     context_dim: 768


data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 1
    num_workers: 8
    wrap: false
    train:
      target: src.datasets.dataset.MyDataset
      params:
          original_path : ./dataset/DIOR-VOC/Annotations/Oriented_Bounding_Boxes/
          image_file_path : ./dataset/DIOR-VOC/VOC2007/JPEGImages/
          resolution : 512
          mask_size : 64
          mode : train
        # size: 512
        # set: train
        # center_crop: true
        # per_image_tokens: false
        # repeats: 100
        # with_bbox: True
        # interpolation: lanczos
        # flip_p: 0.5
        # box_descp: caption
        # spatial_word: all
        # max_src_length: 385
        # max_src_length: 616

    validation:
      target: src.datasets.dataset.MyDataset
      params:
          original_path : ./dataset/DIOR-VOC/Annotations/Oriented_Bounding_Boxes/
          image_file_path : ./dataset/DIOR-VOC/VOC2007/JPEGImages/
          resolution : 512
          mask_size : 64
          mode : val

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        # batch_frequency: 13880
        batch_frequency: 2000
        # log_on_batch_idx: True
        max_images: 4
        increase_log_steps: False

  trainer: ## https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.trainer.trainer.Trainer.html#pytorch_lightning.trainer.trainer.Trainer
    benchmark: True ## torch.backends.cudnn.benchmark
    max_steps: 500000 #500000 ## 
    check_val_every_n_epoch: 50000
    # num_sanity_val_steps: 0
    # accumulate_grad_batches: 8 #2
    # enable_progress_bar: True
    ## callbacks: [TQDMProgressBar(refresh_rate=10)]